#! /bin/bash
#
# Script to monitor files, run unittests, or any other command, and notify
# user using the OS notification mechanism
#
# Usage:
#   utman [options] command ...
#
# All arguments will be considered to be the command to run
#

# Handle options
while getopts ":t:dh" opt; do
    case $opt in
        h)
            # Help
            help=1
            shift 1
            ;;
        d)
            # Debug
            debug=1
            shift 1
            ;;
        t)
            # Title
            echo $OPTARG
            title_text="$OPTARG"
            shift 2
            ;;
        \?)
            echo "ERROR: Invalid option -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "ERROR: Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
    esac
done

# Is there a command or help option given?
if test "$#" -eq 0; then
    echo "ERROR: expecting a <command> to run"
    echo
    help=1
fi
if [[ $help ]]; then
    echo "utman - a file change monitor, command runner and notifier"
    echo
    echo "Typical usage include monitoring source files for changes,"
    echo "running a build/unittest command, and making a notification"
    echo "of the result using a desktop notification."
    echo
    echo "Usage: $( basename "$0" ) <options> <command>"
    echo
    echo "Currently there are no <options>."
    echo
    echo "All arguments will be interpreted as the <command> to run"
    echo "when changes of any of the files matching the pattern changes."
    echo
    echo "Currently recursively ignores files with pattern:"
    echo "    '.#*' and '.git/"
fi
if test "$#" -eq 0; then
    exit
fi

os=`uname -s`
if [[ "$os" == *"CYGWIN"* ]] ; then
    os="Cygwin"
fi

#======================================================================
# Figure out how to watch files and the file pattern
watcher=''
if command -v fswatch >/dev/null 2>&1 ; then
    if [ $debug ] ; then
        echo "Found watcher 'fswatch'"
    fi
    watcher=fswatch
    ipattern=''
    xpattern='-e .\#.* -e .git' # Exclude emacs temporary files and git repo-files
    watcher_options='-r -1 --event 14' # Recursive, one event, events=Created,Updated,Removed
fi

#======================================================================
# Select notifier mechanism depending on availability
case $os in
    Darwin)
        if command -v terminal-notifier >/dev/null 2>&1 ; then
            mechanism=terminal-notifier
            notifier=terminal-notifier
        elif command -v /Applications/terminal-notifier.app/Contents/MacOS/terminal-notifier >/dev/null 2>&1 ; then
            mechanism=terminal-notifier
            notifier=/Applications/terminal-notifier.app/Contents/MacOS/terminal-notifier
        elif command -v growlnotify >/dev/null 2>&1 ; then
            mechanism=growlnotify
            notifier=growlnotify
        fi
        ;;
    Cygwin)
        if command -v growlnotify.exe >/dev/null 2>&1 ; then
            mechanism=growlnotify.exe
            notifier=growlnotify.exe
        elif command -v notify-send >/dev/null 2>&1 ; then
            mechanism=notify-send
            notifier=notify-send
        elif command -v  snoretoast >/dev/null 2>&1 ; then
            mechanism=snoretoast
            notifier=snoretoast
        elif command -v  /cygdrive/c/Program\ Files\ \(x86\)/Growl\ for\ Windows/growlnotify.exe >/dev/null 2>&1 ; then
            mechanism=growlnotify
            notifier=/cygdrive/c/Program\ Files\ \(x86\)/Growl\ for\ Windows/growlnotify.exe
        fi

        ;;
    Linux)
        if command -v growlnotify >/dev/null 2>&1 ; then
            mechanism=growlnotify
            notifier=growlnotify
        elif command -v notify-send >/dev/null 2>&1 ; then
            mechanism=notify-send
            notifier=notify-send
        fi
        ;;
esac

#======================================================================
# Did we find both a watcher and a notifier?

# If no known notifier mechanism available, give hints depending on OS
if [ "$mechanism" = "" ] ; then
    echo "ERROR: No known mechanism for notifications found."
    if [ "$os" = "Darwin" ] ; then
        echo "Supported notifier for Darwin/MacOS is 'terminal-notifier' from"
        echo "https://github.com/julienXX/terminal-notifier or via Brew/MacPorts"
    elif [ "$os" = "Linux" ] ; then
        echo "'notify-send' should be available for Linux. Try"
        echo "'sudo <pkgmgr> install notify-send'."
    elif [ "$os" = "Cygwin" ] ; then
        echo "Suggestions for notifiers on Cygwin are"
        echo "'growlnotify' (included with Growl for Windows) from http://www.growlforwindows.com/ and"
        echo "'snoretoast' (Windows notifications) from https://github.com/KDE/snoretoast."
    else
        echo "No idea how to create nice notifications on this OS..."
        echo "Please suggest a mechanism at https://github.com/thoni56/utman"
    fi
fi
if [ "$watcher" = "" ] ; then
    echo "ERROR: No watcher found, suggestions will be added here at some point..."
    echo "Currently only fswatch (https://github.com/emcrisostomo/fswatch) is supported."
fi
if [ "$watcher" = "" ] || [ "$notifier" = "" ] ; then
    echo "Exiting"
    exit 1
fi

#======================================================================
# Set up options for icons depending on mechanism
case $mechanism in
    terminal-notifier)
        application_prefix=
        app_icon_prefix="-appIcon "
        title_prefix="-title "
        message_prefix="-message "
        icon_prefix="-contentImage "
        ;;
    notify-send)
        application_prefix="--app-name="
        app_icon_prefix=
        title_prefix=" "
        message_prefix=" "
        icon_prefix="--icon="
        ;;
    growlnotify)
        application_prefix="--name "
        app_icon_prefix="--appIcon "
        title_prefix="--title "
        message_prefix="--message "
        icon_prefix="--image "
        ;;
    growlnotify.exe)
        application_prefix="/a:"
        app_icon_prefix=
        title_prefix="/t:"
        message_prefix=" "
        icon_prefix="/i:"
        extra="/silent:true"
        ;;
    snoretoast)
        application_prefix="-appId "
        app_icon_prefix=
        title_prefix="-t "
        message_prefix="-m "
        icon_prefix="-p "
        extra="-silent"
        ;;
    *)
        echo "Unknown notifier mechanism. Exiting..."
        exit
esac

#======================================================================
# Where's the source? The default icons are there...
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  # if $SOURCE is a relative symlink, we must resolve it relative to the path where
  # the symlinked file is located
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

#======================================================================
# Set default values for most notifier options
application_text="utman"
title_text="Unittests"
start_text="Starting..."
passed_text="Passed"
failed_text="Failed"
app_icon="$DIR"/utman-icon.png
start_icon="$DIR"/icon-start.png
passed_icon="$DIR"/icon-passed.png
failed_icon="$DIR"/icon-failed.png

#======================================================================
# Tweak depending on os and mechanism, if needed
if [ "$os" = "Cygwin" ] ; then
    # Need windows paths to icons
    app_icon=`cygpath -w -a "$app_icon"`
    start_icon=`cygpath -w -a "$start_icon"`
    passed_icon=`cygpath -w -a "$passed_icon"`
    failed_icon=`cygpath -w -a "$failed_icon"`
fi
if [ "$mechanism" = "snoretoast" ] ; then
    # No app_icons for snoretoast
    app_icon=
fi

#======================================================================
# Assemble all notifier options
if [ "$application_prefix" != "" ] ; then
    application="$application_prefix$application_text"
fi
if [ "$app_icon_prefix" != "" ] ; then
    app_icon="$app_icon_prefix$app_icon_text"
fi
if [ "$title_prefix" != "" ] ; then
    title="$title_prefix$title_text"
fi
if [ "$icon_prefix" != "" ] ; then
    start="$icon_prefix$start_icon $message_prefix$start_text"
    passed="$icon_prefix$passed_icon $message_prefix$passed_text"
    failed="$icon_prefix$failed_icon $message_prefix$failed_text"
else
    start="$message_prefix$start_text"
    passed="$message_prefix$passed_text"
    failed="$message_prefix$failed_text"
fi


#======================================================================
# Let's run...
while true ; do
    if [ $debug ] ; then
        echo $watcher $watcher_options $ipattern $xpattern .
    fi
    $watcher $watcher_options $ipattern $xpattern .

    # Indicate start
    if [ $debug ] ; then
        echo START: "$notifier" $application $extra $title $start
    fi
    "$notifier" $application $extra $title $start

    # Run the command
    ${@:1}
    status=$?

    # Indicate pass or fail depending on exit code
    if [ $mechanism = "notify-send" ] ; then
        # Stock notify-send can't replace notification so kill all...
        killall notify-osd >/dev/null 2>&1
    fi
    if [ $status = 0 ] ; then
        if [ $debug ] ; then
            echo FINISH: "$notifier" $application $extra $title $passed
        fi
        "$notifier" $application $extra $title $passed
    else
        if [ $debug ] ; then
            echo FINISH: "$notifier" $application $extra $title $failed
        fi
        "$notifier" $application $extra $title $failed
    fi
done
