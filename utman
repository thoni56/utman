#! /bin/bash
#
# utman - UnitTest Monitor And Notifier
#
# Script to monitor files, run unittests, or any other command, and
# notify user using some OS notification mechanism
#
# Usage:
#   utman [options] command ...
#
# All arguments will be considered to be the command to run
#
# You can force utman to use specific, and unknown, notifiers and
# watchers, or tweaking the defaults by entering information in your
# ~/.utmanrc which will simply be executed before searching for
# watchers and notifiers, e.g.:
#
#     watcher='fswatch'
#     watcher_options='-r -1 --event 14'
#     watcher_exclude='-e .\#.* -e .git'
#     watcher_include=''
#     notifier='growlnotify.py'
#     application_option="--application "
#     app_icon_option="--appicon "
#     title_option="--title "
#     message_option=" "
#     icon_option="--icon "
#     extra=""
#
# If you set a notifier or watcher in you ~/.utmanrc you are
# responsible for configuring all the parts.

if [ $1 == "-d" ]; then
    debug=1
    shift
fi
if [ $1 == "-h" ]; then
    help=1
    shift
fi

# Is there a command or help option given?
if test "$#" -eq 0; then
    if [ ! $help ]; then
        echo "ERROR: expecting a <command> to run"
        echo
        help=1
    fi
fi
if [[ $help ]]; then
    echo "utman - a file change monitor, command runner and notifier"
    echo
    echo "Typical usage include monitoring source files for changes,"
    echo "running a build/unittest command, and making a notification"
    echo "of the result using a desktop notification."
    echo
    echo "Usage: $( basename "$0" ) <options> <command>"
    echo
    echo "Currently there are no <options> except '-d' (debug)."
    echo
    echo "All arguments will be interpreted as the <command> to run"
    echo "when changes of any of the files matching the pattern changes."
    echo
    echo "Currently recursively ignores files with pattern:"
    echo "    '.#*' and '.git/"
    echo
    echo "You can also configure non-standard watchers and notifiers and"
    echo "their options and settings in your ~/.utmanrc:"
    echo "  watcher=my_watcher"
    echo "  notifier=my_notifier"

fi
if test "$#" -eq 0; then
    exit
fi

os=`uname -s`
if [[ "$os" == *"CYGWIN"* ]] ; then
    os="Cygwin"
fi

#======================================================================
# Where's the source? The default icons are there...
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  # if $SOURCE is a relative symlink, we must resolve it relative to the path where
  # the symlinked file is located
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

#======================================================================
# Set default values for most notifier options
application_name="utman"
title_text="Unittests"
start_text="Starting..."
passed_text="Passed"
failed_text="Failed"
app_icon="$DIR"/utman-icon.png
start_icon="$DIR"/icon-start.png
passed_icon="$DIR"/icon-passed.png
failed_icon="$DIR"/icon-failed.png

#======================================================================
# Look for settings
if [ -f ~/.utmanrc ]; then
    echo "Reading ~/.utmanrc..."
    . ~/.utmanrc
fi

#======================================================================
# Figure out how to watch files and the file pattern
if [ "$watcher" == "" ]; then
    # No watcher defined in ~/utmanrc
    watcher=''
    if command -v fswatch >/dev/null 2>&1 ; then
        watcher=fswatch
        if [ "$watcher_include" == "" ]; then
            watcher_include=''
        fi
        if [ "$watcher_exclude" == "" ]; then
            # Exclude emacs temporary files and some others
            watcher_exclude='-e \.#.* -e .git -e __pycache__ -e *.d -e *.gcda -e *.gcno -e *.gcov'
        fi
        if [ "$watcher_options" == "" ]; then
            if [ "`uname -s`" == "Linux" ]; then
                watcher_options='-r -1 --event 14' # Recursive, one event, events=PlatformSpecific,Created,Updated,Removed,Renamed
            else # MacOS?
                watcher_options='-r -1 --event 31' # Recursive, one event, events=PlatformSpecific,Created,Updated,Removed,Renamed
            fi
        fi
    fi
    if [ $debug ] ; then
        echo "*** Found watcher '$watcher'"
        echo "*** Include = $watcher_include"
        echo "*** Exclude = $watcher_exclude"
        echo "*** Options = $watcher_options"
    fi
else
    if [ $debug ] ; then
        echo "*** Using watcher '$watcher' from ~/.utmanrc"
        echo "*** Include = $watcher_include"
        echo "*** Exclude = $watcher_exclude"
        echo "*** Options = $watcher_options"
    fi
fi


#======================================================================
# Select notifier mechanism depending on availability

if [ "$notifier" != "" ]; then
    if [ $debug ]; then
        echo "*** Using notifier '$notifier' from ~/.utmanrc"
    fi
else
    if command -v growlnotify.py >/dev/null 2>&1 ; then
        notifier=growlnotify.py
        if [ $debug ]; then
            echo "*** Found notifier '$notifier'"
        fi
    fi
fi

if [ "$notifier" == "" ]; then
    case $os in
        Darwin)
            if command -v terminal-notifier >/dev/null 2>&1 ; then
                notifier=terminal-notifier
            elif command -v /Applications/terminal-notifier.app/Contents/MacOS/terminal-notifier >/dev/null 2>&1 ; then
                notifier=terminal-notifier
                notifier_command=/Applications/terminal-notifier.app/Contents/MacOS/terminal-notifier
            elif command -v growlnotify >/dev/null 2>&1 ; then
                notifier=growlnotify
            fi
            ;;
        Cygwin)
            if command -v growlnotify.exe >/dev/null 2>&1 ; then
                notifier=growlnotify.exe
            elif command -v notify-send >/dev/null 2>&1 ; then
                notifier=notify-send
            elif command -v  snoretoast >/dev/null 2>&1 ; then
                notifier=snoretoast
            elif command -v  /cygdrive/c/Program\ Files\ \(x86\)/Growl\ for\ Windows/growlnotify.exe >/dev/null 2>&1 ; then
                notifier=growlnotify
                notifier_command=/cygdrive/c/Program\ Files\ \(x86\)/Growl\ for\ Windows/growlnotify.exe
            fi

            ;;
        Linux)
            if command -v growlnotify >/dev/null 2>&1 ; then
                notifier=growlnotify
            elif command -v notify-send >/dev/null 2>&1 ; then
                notifier=notify-send
            fi
            ;;
    esac
    if [ $debug ]; then
        echo "*** Found notifier '$notifier'"
    fi
fi


#======================================================================
# Did we find both a watcher and a notifier?

# If no known notifier mechanism available, give hints depending on OS
if [ "$notifier" = "" ] ; then
    echo "ERROR: No known mechanism for notifications found."
    if [ "$os" = "Darwin" ] ; then
        echo "Supported notifier for Darwin/MacOS is 'terminal-notifier' from"
        echo "https://github.com/julienXX/terminal-notifier or via Brew/MacPorts"
    elif [ "$os" = "Linux" ] ; then
        echo "'notify-send' should be available for Linux. Try"
        echo "'sudo <pkgmgr> install notify-send'."
    elif [ "$os" = "Cygwin" ] ; then
        echo "Suggestions for notifiers on Cygwin are"
        echo "'growlnotify' (included with Growl for Windows) from http://www.growlforwindows.com/ and"
        echo "'snoretoast' (Windows notifications) from https://github.com/KDE/snoretoast."
    else
        echo "No idea how to create nice notifications on this OS..."
        echo "Please suggest a notifier at https://github.com/thoni56/utman"
    fi
fi
if [ "$watcher" = "" ] ; then
    echo "ERROR: No watcher found, suggestions will be added here at some point..."
    echo "Currently only fswatch (https://github.com/emcrisostomo/fswatch) is supported."
fi
if [ "$watcher" = "" ] || [ "$notifier" = "" ] ; then
    echo "Exiting"
    exit 1
fi


# If no notifier command, assume same as notifier name
if [ "$notifier_command" == "" ]; then
    notifier_command=$notifier
fi

if [ $debug ] ; then
    echo "*** Using notifier '$notifier' with command '$notifier_command'"
fi


#======================================================================
# Set up options for icons depending on notifier
case $notifier in
    terminal-notifier)
        application_option=
        app_icon_option="-appIcon "
        title_option="-title "
        message_option="-message "
        icon_option="-contentImage "
        ;;
    notify-send)
        application_option="--app-name="
        app_icon_option=
        title_option=" "
        message_option=" "
        icon_option="--icon="
        ;;
    growlnotify)
        application_option="--name "
        app_icon_option="--appIcon "
        title_option="--title "
        message_option="--message "
        icon_option="--image "
        ;;
    growlnotify.exe)
        application_option="/a:"
        app_icon_option=
        title_option="/t:"
        message_option=" "
        icon_option="/i:"
        extra="/silent:true"
        ;;
    growlnotify.py)
        application_option="--application "
        app_icon_option="--appicon "
        title_option="--title "
        message_option=" "
        icon_option="--icon "
        ;;
    snoretoast)
        application_option="-appId "
        app_icon_option=
        title_option="-t "
        message_option="-m "
        icon_option="-p "
        extra="-silent"
        ;;
    '')
        echo "Unknown notifier mechanism. Exiting..."
        exit
esac

#======================================================================
# Tweak depending on os and notifier, if needed
if [ "$os" = "Cygwin" ] ; then
    # Need windows paths to icons
    app_icon=`cygpath -w -a "$app_icon"`
    start_icon=`cygpath -w -a "$start_icon"`
    passed_icon=`cygpath -w -a "$passed_icon"`
    failed_icon=`cygpath -w -a "$failed_icon"`
fi
if [ "$notifier" = "snoretoast" ] ; then
    # No app_icons for snoretoast
    app_icon=
fi

#======================================================================
# Assemble all notifier options
if [ "$application_option" != "" ] ; then
    application="$application_option$application_name"
fi
if [ "$app_icon_option" != "" ] ; then
    app_icon="$app_icon_option$app_icon_text"
fi
if [ "$title_option" != "" ] ; then
    title="$title_option$title_text"
fi
if [ "$icon_option" != "" ] ; then
    start="$icon_option$start_icon $message_option$start_text"
    passed="$icon_option$passed_icon $message_option$passed_text"
    failed="$icon_option$failed_icon $message_option$failed_text"
else
    start="$message_option$start_text"
    passed="$message_option$passed_text"
    failed="$message_option$failed_text"
fi

watchercommand="$watcher $watcher_options $watcher_include $watcher_exclude ."
#======================================================================
# Let's run...
debug_iteration=0
clear
while true ; do
    # Indicate start
    if [ $debug ] ; then
        echo "***" START: "$notifier_command" $application $extra $title $start
    fi
    "$notifier_command" $application $extra $title $start

    if [ $debug ]; then
        echo "*** Skipping the command in debug mode: '${@:1}'"
        sleep 1
        if [ $debug_iteration == 0 ]; then
            status=-1
            ((debug_iteration++))
        else
            status=0
            ((debug_iteration++))
        fi
    else
        # Run the command
        "${@:1}"
        status=$?
    fi

    # Indicate pass or fail depending on exit code
    if [ $notifier = "notify-send" ] ; then
        # Stock notify-send can't replace notification so kill all...
        killall notify-osd >/dev/null 2>&1
    fi
    if [ $status == 0 ] ; then
        echo "*** Utman done: Passed"
        if [ $debug ] ; then
            echo "***" FINISH: "$notifier_command" $application $extra $title $passed
        fi
        "$notifier_command" $application $extra $title $passed
    else
        echo "*** Utman done: Failed"
        if [ $debug ] ; then
            echo "***" FINISH: "$notifier_command" $application $extra $title $failed
        fi
        "$notifier_command" $application $extra $title $failed
    fi

    if [[ $debug_iteration == 2 ]]; then
        exit
    fi

    if [ $debug ] ; then
        echo "*** $watchercommand"
    fi
    trigger=`$watchercommand`
    clear
    if [ $debug ] ; then
        echo "Triggered by $trigger"
    fi

done
